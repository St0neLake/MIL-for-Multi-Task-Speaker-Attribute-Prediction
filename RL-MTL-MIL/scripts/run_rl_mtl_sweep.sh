#!/bin/bash

# Navigate to the root of the RL-MIL-main-snellius directory
# Adjust this if your script is not in a 'scripts' subdirectory of RL-MIL-main-snellius
cd ..
source venv/bin/activate

# ---- RL-MTL Hyperparameter Sweep Configuration ----
# This script initiates a W&B sweep for the full RL-MTL framework.
# It assumes that the base MIL model (task_model within PolicyNetwork)
# has already been pre-tuned and its best_model_config.json is available.

# --- Fixed Parameters for this Sweep ---
MTL_BASELINE_TYPE="MeanMLP" # The base MIL model architecture used within PolicyNetwork
MTL_TARGET_LABELS_STR="age gender party" # Space-separated list of target labels

DATASET="political_data_with_age"
DATA_EMBEDDED_COLUMN_NAME="text"
EMBEDDING_MODEL="roberta-base"
# Autoencoder layers for the base MIL model (task_model)
# This should match the config of the pre-tuned MIL model you want to load
AUTOENCODER_LAYER_SIZES="768,256,768"
BAG_SIZE=20
TASK_TYPE="classification" # Assuming all tasks are classification for this setup

# --- RL Specific Fixed Parameters (can be overridden by sweep YAML if included there) ---
# These help run_rlmil.py select the correct YAML and set up paths if not swept.
RL_MODEL="policy_only"                 # e.g., "policy_only" or "policy_and_value"
RL_TASK_MODEL="vanilla"                # e.g., "vanilla" (uses pre-tuned MIL) or "ensemble"
SAMPLE_ALGORITHM="without_replacement" # e.g., "static", "with_replacement", "without_replacement"
SEARCH_ALGORITHM="epsilon_greedy"      # e.g., "probability", "epsilon_greedy"
REG_ALG="sum"                          # e.g., "sum" or leave empty if no regularization algorithm component in prefix

# Prefix: This is important! It's used by configs.py to select the correct sweep YAML file.
# Construct it based on how your configs.py identifies the RL-MTL sweep YAML.
# Example: if your YAML is hp_rl_mtl_loss.yaml and configs.py looks for "mtl_loss" in prefix
# The prefix generated by configs.py for run_rlmil.py is complex:
# e.g., "neg_policy_only_mtl_test_age_gender_party_epsilon_greedy_reg_sum_sample_without_replacement"
# You need to ensure the prefix components passed to run_rlmil.py allow configs.py to select your *RL-MTL sweep YAML*.
# For simplicity, let's assume you have a YAML like 'hp_rl_mtl.yaml' or 'hp_rl_mtl_loss.yaml'
# and configs.py can pick it up if args.prefix contains "mtl_loss" or "rl_mtl".
# The prefix in configs.py is built dynamically.
# Let's use a base prefix here that run_rlmil.py's configs.py will use to find the RL-MTL sweep YAML.
# The prefix defined in your run_rlmil.sh was "mtl_test_age_gender_party".
# The actual prefix used by get_model_save_directory for RL runs in configs.py is more complex:
# args.prefix = f"neg_{args.prefix}_sample_{args.sample_algorithm}"
# And before that: args.prefix = f"{args.rl_model}_{args.prefix}" if vanilla
# So, the initial --prefix passed to run_rlmil.py needs to be the core part.
# The yaml_configs you uploaded are typically selected based on args.rl_model and then further components in args.prefix.
# e.g. hp_rl_policy_only_loss_epsilon_greedy_reg_sum.yaml
# Let's target a generic RL sweep config like 'hp_rl_loss.yaml' or a custom 'hp_rl_mtl.yaml'
# The --prefix passed to run_rlmil.py will be used by configs.py to determine the YAML.
# If your RL-MTL sweep YAML is, e.g., `yaml_configs/hp_rl_mtl.yaml`,
# your `configs.py` needs a condition like:
# if "mtl" in args.prefix (and args.rl): config_file = "hp_rl_mtl.yaml"
# For now, let's set a simple base_prefix for the --prefix argument:
BASE_PREFIX_FOR_PY_SCRIPT="mtl_sweep_run"

# --- WandB Configuration ---
WANDB_ENTITY="stonelake-university-of-amsterdam"    # Your W&B entity
WANDB_PROJECT="RL_MIL_MTL_big" # Dedicated project for RL-MTL sweeps

# --- Execution Configuration ---
GPU_ID=0 # GPU for the sweep agent
# This seed is for data splitting consistency for the dataset being used by all sweep trials.
# It should match the seed used for pre-tuning the MIL model.
SWEEP_RUN_RANDOM_SEED=64

# --- Fixed Pool Sizes (if not part of the sweep YAML) ---
TRAIN_POOL_SIZE=1
EVAL_POOL_SIZE=3
TEST_POOL_SIZE=10

echo "---------------------------------------------------------------------"
echo "ðŸš€ Initiating RL-MTL Hyperparameter Sweep"
echo "   Labels: $MTL_TARGET_LABELS_STR"
echo "   Dataset: $DATASET, Base MIL Model: $MTL_BASELINE_TYPE"
echo "   Sweep Data Seed: $SWEEP_RUN_RANDOM_SEED"
echo "   W&B Project: $WANDB_PROJECT"
echo "   Target Sweep YAML should be selected by run_rlmil.py based on args."
echo "---------------------------------------------------------------------"

# Construct the python command for run_rlmil.py with sweep enabled
# Hyperparameters like learning rates, hdim, epochs, batch_size, epsilon, etc.,
# will be injected by the W&B agent based on the sweep's YAML configuration.
PYTHON_CMD_RL_SWEEP="CUDA_LAUNCH_BLOCKING=1 python3 run_rlmil.py \
    --run_sweep \
    --rl \
    --baseline \"$MTL_BASELINE_TYPE\" \
    --label $MTL_TARGET_LABELS_STR \
    --bag_size $BAG_SIZE \
    --embedding_model \"$EMBEDDING_MODEL\" \
    --dataset \"$DATASET\" \
    --autoencoder_layer_sizes \"$AUTOENCODER_LAYER_SIZES\" \
    --data_embedded_column_name \"$DATA_EMBEDDED_COLUMN_NAME\" \
    --task_type \"$TASK_TYPE\" \
    --random_seed $SWEEP_RUN_RANDOM_SEED \
    --wandb_entity \"$WANDB_ENTITY\" \
    --wandb_project \"$WANDB_PROJECT\" \
    --gpu $GPU_ID \
    --rl_model \"$RL_MODEL\" \
    --rl_task_model \"$RL_TASK_MODEL\" \
    --sample_algorithm \"$SAMPLE_ALGORITHM\" \
    --search_algorithm \"$SEARCH_ALGORITHM\" \
    --prefix \"$BASE_PREFIX_FOR_PY_SCRIPT\" \
    --train_pool_size $TRAIN_POOL_SIZE \
    --eval_pool_size $EVAL_POOL_SIZE \
    --test_pool_size $TEST_POOL_SIZE \
    --balance_dataset" # Add if you want dataset balancing

# Add --reg_alg if it's a fixed part of this sweep setup
if [ ! -z "$REG_ALG" ]; then
    PYTHON_CMD_RL_SWEEP="$PYTHON_CMD_RL_SWEEP --reg_alg $REG_ALG"
fi

# The run_rlmil.py script, when called with --run_sweep, should:
# 1. Parse arguments using configs.py.
# 2. configs.py should load the appropriate RL-MTL sweep YAML based on args (e.g., args.prefix).
# 3. run_rlmil.py should then call wandb.sweep() with the loaded sweep_config to initialize the sweep.
# 4. It should print the SWEEP_ID.
# 5. Then, it should call wandb.agent(SWEEP_ID, function_to_run_one_trial, count=run_cap_from_yaml).

# This shell script will execute the python command that starts step 3 & 5 above.
# You will then likely need to run 'wandb agent <SWEEP_ID>' in one or more terminals
# if run_rlmil.py only initializes the sweep and prints the ID without starting an agent itself.
# However, a common pattern is for the script with --run_sweep to also start an agent.

SESSION_NAME="rl_mtl_sweep_${DATASET}_${MTL_BASELINE_TYPE}"
FULL_COMMAND_RL_SWEEP="CUDA_VISIBLE_DEVICES=$GPU_ID $PYTHON_CMD_RL_SWEEP"
LOG_FILE_PATH="sweep_run_log_${SESSION_NAME}_$(date +%s).txt" # Added timestamp to avoid overwriting
echo "Full command output will be logged to: $LOG_FILE_PATH"

echo "Executing Python script to initialize W&B sweep and start agent in screen session '$SESSION_NAME':"
echo "$FULL_COMMAND_RL_SWEEP"
echo "Monitor the output in the screen session or W&B dashboard."
echo "---------------------------------------------------------------------"

screen -L -Logfile "$LOG_FILE_PATH" -dmS "$SESSION_NAME" bash -c "
  echo 'Starting Python script for sweep agent...'
  $FULL_COMMAND_RL_SWEEP; \
  echo ''; \
  echo '--------------------------------------------------'; \
  echo 'RL-MTL Sweep setup script (run_rlmil.py --run_sweep) finished or agent started.'; \
  echo 'Screen session $SESSION_NAME will remain active if agent is running or if script ended with exec bash.'; \
  echo 'To detach: Ctrl+A then D'; \
  echo '--------------------------------------------------'; \
  exec bash"

echo "âœ… RL-MTL Sweep setup launched in screen session: $SESSION_NAME"
echo "   To attach to the session (to see SWEEP_ID or agent output), type: screen -r $SESSION_NAME"
echo "   You may need to run 'wandb agent YOUR_SWEEP_ID' separately if the script only initializes the sweep."
echo "---------------------------------------------------------------------"